#!/bin/bash

function patchbin() {
	if [[ -z $1 ]]; then
		echo "You need to provide the binary name"
		return 1
	fi
	patchelf --set-interpreter /opt/glibc/lib/ld-linux-x86-64.so.2 --set-rpath /opt/glibc/ $1
}

function patchbin_2-26() {
	patchelf --set-interpreter /opt/glibc-2-26/lib/ld-linux-x86-64.so.2 --set-rpath /opt/glibc-2-26/ $1
}
function patchbin_2-27() {
	patchelf --set-interpreter /opt/glibc-2-27/lib/ld-linux-x86-64.so.2 --set-rpath /opt/glibc-2-27/ $1
}
function patchbin_2-27() {
	patchelf --set-interpreter /opt/glibc-2-27/lib/ld-linux-x86-64.so.2 --set-rpath /opt/glibc-2-27/ $1
}
function suid() {
	sudo chown root:root $1
	sudo chmod 4755 $1
}

function set-current() {
	echo $(pwd) > ~/.current
}

function get-from-college() {
	scp "hacker@dojo.pwn.college:/challenge/*" .
}

function localip() {
	[[ -z "$1" ]] && echo "No interface specified!" && return 127
	ip a s "$1" | grep inet | cut -d $'\n' -f1 | awk -F ' ' '{print $2}' | cut -d '/' -f1	
}

function init_nmap() {
	[[ ! -d ./nmap ]] && mkdir -p ./nmap
	[[ -z "$2" ]] && min_rate=1000 || min_rate="$2"
	[[ -z "$1" ]] && "No ip specified!" && return 127
	nmap -v -p- --min-rate="$min_rate" -oN nmap/initial -Pn "$1"
}

function full_nmap() {
	[[ ! -d ./nmap ]] && mkdir -p ./nmap
	[[ -z "$1" ]] && "No ip specified!" && return 127
	[[ -z "$2" ]] && "No ports specified!" && return 127
	nmap -sC -sV -oN nmap/full_scan -Pn -p "$2" "$1"
}

function connect() {
	# Simply connects to the first .ovpn file it finds.
	file=$(find . -name "*.ovpn" -print -quit)
	echo "Connecting to $file..."
	sudo openvpn $file
}

function setup() {
	gcloud container clusters get-credentials trustline-staging-cluster --zone "me-central2"
}

function get-base() {
	cp ~/Templates/$1 .
	file=`basename $(find . -executable -type f ! \( -iname \*.py -o -iname \*.so\* -o -iname \*libc\* -o -iname \*ld\* -o -iname \*.c\* \ ) -print0)`
	sed -i "s/\.\/EXE/$x/g" $1
}

## Aliases
alias college="ssh hacker@dojo.pwn.college"
alias ctfs="cd ~/Documents/CTFs/"
alias coredumps="ls -la /var/lib/apport/coredump"
alias oscp="~/Documents/certifications/OSCP"
alias clip='xclip -sel clip'
alias get-exploit="get-base exploit.py"
alias get-fmt="get-base exploit-fmt.py"
alias get-basic="get-base exploit-basic.py"
alias fmt-generator="~/Templates/generate.py"
alias fixperms="chown -R 1000:1000"
alias docker-compose="docker compose"

## Exports:
export LUMINA_TLS=false
export LUNINA_HOST=localhost
export LUMINA_PORT=1234
export DEBUGINFOD_URLS="https://debuginfod.ubuntu.com"
